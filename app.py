# app.py
# Insomnie ‚Äì Entscheidungsunterst√ºtzung (Explizite Entscheidungsknoten nach Fig. 1 & Fig. 2)
# Quelle: Heidbreder et al. 2024 (BMC Primary Care). Demo/Schulung ‚Äì keine medizinische Beratung.

import streamlit as st
from datetime import datetime
import io

st.set_page_config(page_title="Insomnie ‚Äì Entscheidungsunterst√ºtzung", page_icon="üõå", layout="centered")
st.title("üõå Insomnie ‚Äì Entscheidungsunterst√ºtzung (Demo)")
st.caption("Nur zu Demonstrations-/Schulungszwecken. Keine medizinische Beratung.")

st.sidebar.header("Nutzung")
st.sidebar.markdown("""
W√§hle unten, ob du den **akuten** (Fig. 1) oder **chronischen** (Fig. 2) Pfad durchl√§ufst.
Die Fragen sind als **explizite Entscheidungsknoten** mit kurzen Tooltips umgesetzt.
Du kannst das Ergebnis als **CSV** oder **Markdown** exportieren.
""")

FLOW = st.radio("Algorithmus w√§hlen", ["Fig. 1 ‚Äì Akute Insomnie", "Fig. 2 ‚Äì Chronische Insomnie"], horizontal=False)

st.divider()

# ========================= Hilfsfunktionen =========================
def yesno(label: str, *, help: str = None, key: str = None):
    return st.radio(label, ["Nein", "Ja"], horizontal=True, key=key or label, help=help) == "Ja"


def bullets(items):
    for it in items:
        st.markdown(f"- {it}")


def export_summary_csv(summary: dict) -> bytes:
    # very small hand-made CSV (key;value) for audit/documentation
    lines = ["Feld;Wert"]
    for k, v in summary.items():
        v_str = ", ".join(v) if isinstance(v, (list, tuple)) else str(v)
        lines.append(f"{k};{v_str}")
    return ("
".join(lines)).encode("utf-8")


def export_summary_md(summary: dict, recommendations: list) -> bytes:
    buf = io.StringIO()
    buf.write("# Insomnie ‚Äì Entscheidungsunterst√ºtzung (Zusammenfassung)

")
    buf.write(f"Zeitpunkt: {datetime.now().isoformat(timespec='seconds')}

")
    buf.write("## Eingaben
")
    for k, v in summary.items():
        v_str = ", ".join(v) if isinstance(v, (list, tuple)) else ("Ja" if v is True else ("Nein" if v is False else str(v)))
        buf.write(f"- **{k}:** {v_str}
")
    buf.write("
## Empfehlungen (Demo)
")
    for r in recommendations:
        buf.write(f"- {r}
")
    return buf.getvalue().encode("utf-8")


# ========================= Fig. 1: Akute Insomnie =========================
def run_fig1():
    st.header("Fig. 1 ‚Äì Akute Insomnie: Entscheidungsfluss (Demo)")

    st.subheader("Knoten A ‚Äì Symptome & Dauer")
    dauer_lt_3m = yesno(
        "Schlafbeschwerden **< 3 Monate**",
        help="Ab Beginn der aktuellen Episode gerechnet; √úbergang zu chronisch ab ‚â• 3 Monaten.",
        key="f1_dauer"
    )
    freq_ge_3w = yesno(
        "H√§ufigkeit **‚â• 3 N√§chte/Woche**",
        help="Typische DSM-5/ICSD-3 H√§ufigkeitsschwelle.",
        key="f1_freq"
    )
    day_impair = yesno(
        "**Tagesbeeintr√§chtigung** vorhanden",
        help="Z. B. M√ºdigkeit, Leistungseinbu√üen, Konzentrationsprobleme, Gereiztheit.",
        key="f1_impair"
    )

    st.subheader("Knoten B ‚Äì Red Flags / unmittelbare Priorit√§ten")
    redflags = st.multiselect(
        "Red Flags (Mehrfachauswahl)",
        [
            "Akute Suizidalit√§t / schwere depressive Symptomatik",
            "Psychose/Manie-Verdacht",
            "Schwere Substanznutzung (z. B. Alkohol, Sedativa)",
            "Neurologische Alarmzeichen",
        ],
        help="Bei Vorliegen: vorrangige Abkl√§rung/√úberweisung vor symptomatischer Therapie.",
        key="f1_redflags"
    )

    st.subheader("Knoten C ‚Äì Screening auf andere Schlafst√∂rungen")
    other_sleep = st.multiselect(
        "Hinweise auf ‚Ä¶ (Mehrfachauswahl)",
        [
            "Obstruktive Schlafapnoe (Schnarchen/Atemaussetzer/Tagesschl√§frigkeit)",
            "Restless-Legs-Syndrom (Beinbeschwerden/Bewegungsdrang abends)",
            "Zirkadiane Schlaf-Wach-St√∂rung (Schichtarbeit/Phasenverschiebung)",
            "Narkolepsie-/Parasomnie-Verdacht",
        ],
        help="Bei starkem Verdacht fr√ºhzeitig gezielt abkl√§ren oder √ºberweisen.",
        key="f1_other"
    )

    st.subheader("Knoten D ‚Äì Schlafhygiene & Verhalten")
    hygiene = st.multiselect(
        "Auff√§lligkeiten (Mehrfachauswahl)",
        [
            "Unregelm√§√üige Bett-/Aufstehzeiten",
            "Lange Bettzeit (deutlich > Schlafzeit)",
            "Koffein am sp√§ten Nachmittag/Abend",
            "Alkohol/Nikotin am Abend",
            "Intensive Bildschirm-/Ger√§tenutzung vor dem Schlaf",
        ],
        help="Diese Faktoren gezielt ver√§ndern (Stimulus-Kontrolle, Restriktion, Psychoedukation).",
        key="f1_hygiene"
    )

    if st.button("üîé Auswertung ‚Äì Fig. 1"):
        st.divider()
        st.subheader("Ergebnis ‚Äì Fig. 1")

        # Einstufung akut
        if redflags:
            st.error("**Red Flags vorhanden:** Dringliche **Abkl√§rung/√úberweisung** priorisieren.")

        akut_kriterien = dauer_lt_3m and freq_ge_3w and day_impair
        if akut_kriterien:
            st.success("Akute/kurzandauernde Insomnie ‚Äì Kriterien erf√ºllt")
        else:
            st.warning("Kriterien f√ºr akute Insomnie **nicht vollst√§ndig** ‚Äì weitere Abkl√§rung/Verlaufskontrolle.")

        st.markdown("**Empfohlener Pfad (Demo)**")
        recs = []
        if other_sleep:
            recs.append("Gezielte **Abkl√§rung/√úberweisung** wegen m√∂glicher anderer Schlafst√∂rung(en).")
        recs.append("Kurzintervention: **Schlafhygiene**, Psychoedukation, **Stimulus-Kontrolle**.")
        recs.append("**Verlaufskontrolle** in 2‚Äì4 Wochen; bei Persistenz oder Verschlechterung neu bewerten.")
        if hygiene:
            recs.append("Individuell **Hygienefaktoren** adressieren (siehe oben ausgew√§hlt).")
        recs.append("Pharmakotherapie nur gezielt/kurzzeitig erw√§gen; Nutzen/Risiken pr√ºfen.")
        bullets(recs)

        # Dokumentation & Export
        summary = {
            "Pfad": "Fig. 1 ‚Äì Akut",
            "< 3 Monate": dauer_lt_3m,
            "‚â• 3 N√§chte/Woche": freq_ge_3w,
            "Tagesbeeintr√§chtigung": day_impair,
            "Red Flags": redflags,
            "Hinweise andere Schlafst√∂rungen": other_sleep,
            "Schlafhygiene-Auff√§lligkeiten": hygiene,
        }
        st.subheader("Dokumentation & Export")
        csv_bytes = export_summary_csv(summary)
        md_bytes = export_summary_md(summary, recs)
        st.download_button("‚¨áÔ∏è CSV herunterladen", data=csv_bytes, file_name="insomnie_fig1_akut.csv", mime="text/csv")
        st.download_button("‚¨áÔ∏è Markdown herunterladen", data=md_bytes, file_name="insomnie_fig1_akut.md", mime="text/markdown")


# ========================= Fig. 2: Chronische Insomnie =========================
def run_fig2():
    st.header("Fig. 2 ‚Äì Chronische Insomnie: Entscheidungsfluss (Demo)")

    st.subheader("Knoten 1 ‚Äì Diagnosekriterien")
    dauer_ge_3m = yesno(
        "Schlafbeschwerden **‚â• 3 Monate**",
        help="Chronische Insomnie erfordert in der Regel Dauer ‚â• 3 Monate.",
        key="f2_dauer"
    )
    freq_ge_3w = yesno(
        "H√§ufigkeit **‚â• 3 N√§chte/Woche**",
        help="Typische DSM-5/ICSD-3 H√§ufigkeitsschwelle.",
        key="f2_freq"
    )
    day_impair = yesno(
        "**Tagesbeeintr√§chtigung** vorhanden",
        help="Z. B. M√ºdigkeit, Leistungseinbu√üen, Konzentrationsprobleme.",
        key="f2_impair"
    )

    st.subheader("Knoten 2 ‚Äì Schweregrad (ISI optional)")
    use_isi = yesno(
        "**Insomnia Severity Index (ISI)** liegt vor",
        help="Falls erhoben, kann der ISI die Symptomlast/Verlaufsmessung unterst√ºtzen.",
        key="f2_useisi"
    )
    isi = None
    if use_isi:
        isi = st.number_input("ISI-Gesamtwert (0‚Äì28)", min_value=0, max_value=28, value=0, step=1, help="Standardauswertung nach Instrument.")

    st.subheader("Knoten 3 ‚Äì Komorbidit√§ten & differenzierende Schlafst√∂rungen")
    other_sleep = st.multiselect(
        "Hinweise auf andere Schlafst√∂rung(en) (Mehrfachauswahl)",
        [
            "Obstruktive Schlafapnoe",
            "Restless-Legs-Syndrom",
            "Zirkadiane St√∂rung",
            "Narkolepsie/Parasomnien",
        ],
        help="Bei Hinweisen zuerst abkl√§ren/mitbehandeln.",
        key="f2_other"
    )
    relevant_comorbid = st.multiselect(
        "Relevante Komorbidit√§ten (Mehrfachauswahl)",
        [
            "Depression/Angst",
            "Chronischer Schmerz",
            "Substanzkonsum",
            "Neurologische/Internistische Erkrankung",
        ],
        help="Komorbidit√§ten k√∂nnen Verlauf/Therapie beeinflussen und sollen mitadressiert werden.",
        key="f2_comorbid"
    )

    st.subheader("Knoten 4 ‚Äì Zugang & Pr√§ferenz")
    cbt_available = yesno(
        "**CBT-I** verf√ºgbar/zug√§nglich",
        help="Vor Ort, digital oder telemedizinisch.",
        key="f2_cbt"
    )
    patient_prefers_nopsych = yesno(
        "Patient:in bevorzugt **nicht-medikament√∂se** Optionen",
        help="Pr√§ferenz erfragen und dokumentieren.",
        key="f2_pref"
    )

    st.subheader("Knoten 5 ‚Äì Red Flags")
    redflags = st.multiselect(
        "Red Flags (Mehrfachauswahl)",
        [
            "Akute Suizidalit√§t / schwere depressive Symptomatik",
            "Psychose/Manie-Verdacht",
            "Schwere Substanznutzung",
            "Neurologische Alarmzeichen",
        ],
        help="Bei Vorliegen: dringliche Abkl√§rung/√úberweisung.",
        key="f2_redflags"
    )

    st.subheader("Knoten 6 ‚Äì Schlafhygiene & Verhalten")
    hygiene = st.multiselect(
        "Auff√§lligkeiten (Mehrfachauswahl)",
        [
            "Unregelm√§√üige Bett-/Aufstehzeiten",
            "Lange Bettzeit",
            "Koffein sp√§t",
            "Alkohol/Nikotin abends",
            "Bildschirmnutzung vor dem Schlaf",
        ],
        help="Diese Faktoren im Rahmen der CBT-I-Module gezielt adressieren.",
        key="f2_hygiene"
    )

    if st.button("üîé Auswertung ‚Äì Fig. 2"):
        st.divider()
        st.subheader("Ergebnis ‚Äì Fig. 2")

        if redflags:
            st.error("**Red Flags vorhanden:** Dringliche **Abkl√§rung/√úberweisung** vor Therapie priorisieren.")

        chron_kriterien = dauer_ge_3m and freq_ge_3w and day_impair
        if chron_kriterien:
            st.success("**Chronische Insomnie ‚Äì Kriterien erf√ºllt (Verdachtsdiagnose)**")
        else:
            st.warning("Kriterien f√ºr chronische Insomnie **nicht vollst√§ndig** ‚Äì weitere Abkl√§rung.")

        st.markdown("**Empfohlener Pfad (Demo)**")
        recs = []
        if other_sleep:
            recs.append("Vor/mit Insomniebehandlung: **andere Schlafst√∂rung(en)** abkl√§ren/behandeln.")
        if relevant_comorbid:
            recs.append("**Komorbidit√§ten** parallel adressieren und dokumentieren.")
        if cbt_available:
            recs.append("**CBT-I als First-line** (Stimulus-Kontrolle, Schlafrestriktion, kognitive Strategien, Psychoedukation, Schlafhygiene).")
        else:
            recs.append("Wenn CBT-I nicht verf√ºgbar: **CBT-I-nahe Kurzprogramme**/digitale Angebote; √úberweisung erw√§gen.")
        if not patient_prefers_nopsych:
            recs.append("Bei Pr√§ferenz/Aufkl√§rung: **Pharmakotherapie** *zeitlich begrenzt* erw√§gen; Nutzen/Risiken beachten.")
        if hygiene:
            recs.append("**Schlafhygiene-Faktoren** gezielt ver√§ndern (siehe ausgew√§hlte Punkte).")
        if use_isi:
            recs.append(f"**ISI** dokumentiert (Wert: {isi}). Verlauf/Response orientieren.")
        recs.append("**Verlaufskontrolle** und ggf. **Therapieanpassung** (Non-Response ‚Üí Intensivierung/Alternative).")
        bullets(recs)

        # Dokumentation & Export
        summary = {
            "Pfad": "Fig. 2 ‚Äì Chronisch",
            "‚â• 3 Monate": dauer_ge_3m,
            "‚â• 3 N√§chte/Woche": freq_ge_3w,
            "Tagesbeeintr√§chtigung": day_impair,
            "ISI erfasst": use_isi,
            "ISI Wert": isi if use_isi else "",
            "Hinweise andere Schlafst√∂rungen": other_sleep,
            "Komorbidit√§ten": relevant_comorbid,
            "CBT-I verf√ºgbar": cbt_available,
            "Pr√§ferenz nicht-medikament√∂s": patient_prefers_nopsych,
            "Red Flags": redflags,
            "Schlafhygiene-Auff√§lligkeiten": hygiene,
        }
        st.subheader("Dokumentation & Export")
        csv_bytes = export_summary_csv(summary)
        md_bytes = export_summary_md(summary, recs)
        st.download_button("‚¨áÔ∏è CSV herunterladen", data=csv_bytes, file_name="insomnie_fig2_chronisch.csv", mime="text/csv")
        st.download_button("‚¨áÔ∏è Markdown herunterladen", data=md_bytes, file_name="insomnie_fig2_chronisch.md", mime="text/markdown")


# ========================= Router =========================
if FLOW.startswith("Fig. 1"):
    run_fig1()
else:
    run_fig2()

st.divider()
st.caption("Quelle: Heidbreder et al., 2024. Diese App ist ein Prototyp und ersetzt keine klinische Beurteilung.")

